package com.springboard.repository;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;

import com.springboard.vo.BoardVO;

public class RawJdbcBoardDao implements BoardDao {

	@Override
	public int insertBoard(BoardVO board) {

		Connection conn = null;
		PreparedStatement pstmt = null;
		
		try {
			// 1. register driver
			Class.forName("oracle.jdbc.OracleDriver");

			// 2. create connection
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "springboard", "9922");

			// 3. create command
			String sql = 
					"INSERT INTO tbl_board (bno, title, writer, content) " + 
					"VALUES (seq_board.nextval, ?, ?, ?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, board.getTitle());
			pstmt.setString(2, board.getWriter());
			pstmt.setString(3, board.getContent());
			
			// 4. execute command
			pstmt.executeUpdate(); // for INSERT, UPDATE, DELETE
			
			// 5. process result (if 'SELECT')
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 6. close connection
			try { pstmt.close(); } catch (Exception e) {}
			try { conn.close(); } catch (Exception e) {}
		}

		return 0;
	}

	@Override
	public List<BoardVO> selectBoard() {
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			// 1. register driver
			Class.forName("oracle.jdbc.OracleDriver");

			// 2. create connection
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "springboard", "9922");

			// 3. create command
			String sql = 
					"SELECT bno, title, writer, regdate, updatedate, deleted, readcount " + 
					"FROM tbl_board " +
					"WHERE deleted = '0' " +
					"ORDER BY bno DESC";
			pstmt = conn.prepareStatement(sql);
			
			// 4. execute command
//			pstmt.executeUpdate(); // for INSERT, UPDATE, DELETE
			rs = pstmt.executeQuery();
			
			// 5. process result (if 'SELECT')
			while (rs.next()) {
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 6. close connection
			try { pstmt.close(); } catch (Exception e) {}
			try { conn.close(); } catch (Exception e) {}
		}
		
		return boards;
	}

}
