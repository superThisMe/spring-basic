package com.springboard.controller;

import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.springboard.service.BoardService;
import com.springboard.vo.BoardVO;

@Controller
@RequestMapping(path = { "/board" })
public class BoardController {

	@Autowired
	@Qualifier("boardService")
	private BoardService boardService;

	@GetMapping(path = { "/list.action" })
	public String list(Model model) { // view list

		// lookup data (request service)
		List<BoardVO> boards = boardService.findBoard();

		// put boards into Model type argument
		model.addAttribute("boards", boards);

		return "board/list"; // /WEB-INF/views/ + board/list + .jsp
	}

	@GetMapping(path = { "/write.action" })
	public String showWriteForm() { // view write

		return "board/write";
	}

	@PostMapping(path = { "/write.action" })
	public String write(BoardVO board, RedirectAttributes attr) { // process write

		int newBoardNo = boardService.writeBoard(board);
//		log.warn("NEW BOARD NO : " + newBoardNo);

		// 1. pass data with GET
//		return "redirect:list.action?newBno=" + newBoardNo;

		// 2. pass data using Spring function
		attr.addFlashAttribute("newBno", newBoardNo); // save data in session
		return "redirect:list.action";
	}

	@GetMapping(path = { "/detail.action" })
	public String showDetail(Model model, int bno, HttpServletRequest req, HttpServletResponse resp) {

		// 1-1. bno를 사용해서 게시물 조회
		BoardVO board = boardService.fintBoardByBno(bno);
		if (board == null) {
			return "redirect:list.action";
		}

		// 1-2. 기존에 읽은 글번호 목록을 Cookie에서 읽기
		String bnoRead = "";
		Cookie[] cookies = req.getCookies();
		for (Cookie cookie : cookies) {
			if (cookie.getName().equals("bno_read")) {
				bnoRead = cookie.getValue();
			}
		}
		// 1-3. bno가 기존에 읽은 글 번호 목록에 없다면 조회수 증가
		if (!bnoRead.contains(String.format("|%d|", bno))) {
			boardService.increaseReadCount(bno);
			board.setReadCount(board.getReadCount() + 1);

			// 1-4. 같은 사용자(브라우저)의 조회수 증가를 막기 위해 Cookie에 데이터 저장
			Cookie newCookie = new Cookie("bno_read", String.format("%s|%d|", bnoRead, bno));
			resp.addCookie(newCookie);
		}

		// 2. 조회된 데이터를 View에서 사용할 수 있도록 저장
		model.addAttribute("board", board);

		// 3. View로 이동
		return "board/detail";
	}

	@GetMapping(path = { "/delete.action" })
	public String delete(int bno) {

		boardService.deleteBoard(bno);

		return "redirect:list.action";
	}

	@GetMapping(path = { "/update.action" })
	public String showUpdateFrorm(Model model, int bno) {

		BoardVO board = boardService.fintBoardByBno(bno);
		if (board == null) {
			return "redirect:list.action";
		}

		model.addAttribute("board", board);

		return "board/update";
	}

	@PostMapping(path = { "/update.action" })
	public String update(BoardVO board) {

		boardService.updateBoard(board);

		return "redirect:detail.action?bno=" + board.getBno();
	}

}
