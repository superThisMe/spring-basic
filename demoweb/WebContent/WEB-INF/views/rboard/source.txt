		//업로드 처리
		request.setCharacterEncoding("utf-8");

		//파일 업로드를 포함한 요청인지 확인 (multipart/form-data 형식 확인)
		if (ServletFileUpload.isMultipartContent(request) == false) {
			response.sendRedirect("list.action");
			return;
		}

		//경로 문자열을 저장할 변수
		//application.getRealPath('웹경로')
		//--> 가상경로(웹경로) -> 물리경로(컴퓨터경로)
		//--> http://..... -> C:/......
		ServletContext application = request.getServletContext();
		String path = application.getRealPath("/upload-files");		//최종 파일 저장 경로
		String tempPath = application.getRealPath("/upload-temp");	//임시 파일 저장 경로

		//전송 데이터 각 요소를 분리해서 개별 객체를 만들때 사용할 처리기
		DiskFileItemFactory factory = new DiskFileItemFactory();
		factory.setSizeThreshold(1024 * 1024 * 2);	//임시 파일을 만들지 결정하는 기준 설정
		factory.setRepository(new File(tempPath));	//임시 파일 저장 경로 지정

		//요청 정보를 읽을 파서(Parser) 생성 (요청을 읽고 요소별로 분리)
		ServletFileUpload uploader = new ServletFileUpload(factory);
		uploader.setFileSizeMax(1024 * 1024 * 10);//최대 파일 크기
		
		Upload upload = new Upload();
		UploadFile uploadFile = null;

		try {			
			//요청 정보를 파싱하고 개별 객체의 목록을 반환
			List<FileItem> items = uploader.parseRequest(request);
	
			////////////////////////////////////////////////////////////////////////////////
	
			//목록에 담긴 데이터 사용
			for (FileItem item : items) {
				if (item.isFormField()) { //form-data인 경우 (File이 아닌 일반 데이터인 경우)
					if (item.getFieldName().equals("title")) {
						upload.setTitle(item.getString("utf-8"));
					} else if (item.getFieldName().equals("uploader")) {
						upload.setUploader(item.getString("utf-8"));
					} else if (item.getFieldName().equals("content")) {
						upload.setContent(item.getString("utf-8"));
					}
				} else { //file인 경우
					String fileName = item.getName(); //파일 이름 가져오기
					if (fileName != null && fileName.length() > 0) { //내용이 있는 경우
						if (fileName.contains("\\")) { // iexplore 경우
							//C:\AAA\BBB\CCC.png -> CCC.png 
							fileName = fileName.substring(fileName.lastIndexOf("\\") + 1);
						}
						//String uniqueFileName = Util.makeUniqueFileName(path, fileName);//고유한 파일이름 만들기
						String uniqueFileName = Util.makeUniqueFileName(fileName);//고유한 파일이름 만들기
						item.write(new File(path, uniqueFileName)); //파일 저장
						item.delete(); //임시 파일 삭제
						
						uploadFile = new UploadFile();
						
						uploadFile.setUserFileName(fileName);
						uploadFile.setSavedFileName(uniqueFileName);
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		UploadDao dao = new UploadDao();
		int newUploadNo = dao.insertUpload(upload); //title, uploader, content, uploadno(자동생산)
		if (uploadFile != null) {
			uploadFile.setUploadNo(newUploadNo);
			dao.insertUploadFile(uploadFile);//savedfilename, userfilename, uploadfileno(자동생산), uploadno(insertUpload에서 자동생산한 값)
		}
		//list.action으로 이동
		response.sendRedirect("list.action");